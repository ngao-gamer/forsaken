getgenv().Players = game:GetService("Players")
getgenv().playerData = game:GetService("Players").LocalPlayer:WaitForChild("PlayerData")
getgenv().ReplicatedStorage = game:GetService("ReplicatedStorage")
getgenv().RunService = game:GetService("RunService")
getgenv().MarketplaceService = game:GetService("MarketplaceService")
getgenv().RemoteEvent = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent")
getgenv().TweenService = game:GetService("TweenService")
getgenv().PlayerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
local Humanoid, Animator
getgenv().player = Players.LocalPlayer
getgenv().purchasedEmotesFolder = playerData:WaitForChild("Purchased"):WaitForChild("Emotes")
getgenv().Remote = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent")

-- ===================================
-- == KHỞI TẠO FLUENT UI MỚI ==
-- ===================================

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
   Title = "Purium Hub | by ngao-gamer",
   ThemeIndex = 3, -- 3 là màu xanh mặc định (Cyan)
   AccentColor = "Cyan",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "Purium",
      FileName = "Purium Hub"
   }
})

-- Tạo các Tab với Icon ID CHUẨN của Fluent UI
local CombatTab = Window:AddTab("Combat", 4483750058) -- Icon: sword
local GeneratorsTab = Window:AddTab("Generators", 6147690616) -- Icon: gear (hoặc máy móc)
local ESPTab = Window:AddTab("ESP", 6147690637) -- Icon: eye/scan
local StaminaSetTab = Window:AddTab("Stamina Settings", 6147690753) -- Icon: feet/run
local AimbotTab = Window:AddTab("Aimbot", 4483750031) -- Icon: target/crosshair
local MiscsTab = Window:AddTab("Misc", 6147690554) -- Icon: cogs
local AntiSlowsTab = Window:AddTab("Anti Slow", 6147690554) -- Icon: cogs
local AchieveTab = Window:AddTab("Achievements", 6147690614) -- Icon: medal


-- == Generators Tab ==
local genEnabled = false
local genInterval = 1.25
local re = true
local Check = false
local lt = 0

GeneratorsTab:AddSection("Auto Generator")

local autoGenToggle = GeneratorsTab:AddToggle("AutoGenToggle", {
	Title = "Auto Do Generator",
	Default = genEnabled,
}):OnChange(function(Value)
	genEnabled = Value
end)

local genIntervalSlider = GeneratorsTab:AddSlider("GenIntervalSlider", {
	Title = "Do Generator Interval (Seconds)",
	Range = {1, 15},
	Increment = 0.25,
	Suffix = "s",
	Default = genInterval,
}):OnChange(function(Value)
	genInterval = Value
end)

-- == Hook RF/RE để detect vào/ra gen + cooldown ==
local Old
Old = hookmetamethod(game, "__namecall", function(Self, ...)
	local Args = { ... }
	local Method = getnamecallmethod()
	if not checkcaller() and typeof(Self) == "Instance" then
		if Method == "InvokeServer" or Method == "FireServer" then
			if tostring(Self) == "RF" then
				if Args[1] == "enter" then
					Check = true
				elseif Args[1] == "leave" then
					Check = false
				end
			elseif tostring(Self) == "RE" then
				lt = os.clock()
			end
		end
	end
	return Old(Self, unpack(Args))
end)

-- == Auto Generator Loop ==
game:GetService("RunService").Stepped:Connect(function()
	if genEnabled and Check and re and os.clock() - lt >= genInterval then
		re = false
		task.spawn(function()
			for _, gen in ipairs(workspace.Map.Ingame:WaitForChild("Map"):GetChildren()) do
				if gen.Name == "Generator" and gen:FindFirstChild("Remotes") then
					gen.Remotes.RE:FireServer()
				end
			end
			task.wait(genInterval)
			re = true
		end)
	end
end)

-- === ESP Toggles ===
local killersESPToggle = false
local survivorsESPToggle = false
local itemESPEnabled = false

ESTab:AddSection("Main ESP")

ESTab:AddToggle("KillersESP", {
   Title = "Killers ESP",
   Default = killersESPToggle,
}):OnChange(function(Value)
   killersESPToggle = Value
end)

ESTab:AddToggle("SurvivorsESP", {
   Title = "Survivors ESP",
   Default = survivorsESPToggle,
}):OnChange(function(Value)
   survivorsESPToggle = Value
end)

-- === ESP Logic (Giữ nguyên) ===
local camera = workspace.CurrentCamera

local killersFolder = workspace:WaitForChild("Players"):WaitForChild("Killers")
local survivorsFolder = workspace:WaitForChild("Players"):WaitForChild("Survivors")

-- ... (Các hàm và logic ESP Player/Fake Noli) ...
local function attachBillboard(model, color)
    if model:FindFirstChild("ESP_NameBillboard") then return end
    local head = model:FindFirstChild("Head") or model:FindFirstChildWhichIsA("BasePart")
    if not head then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_NameBillboard"
    billboard.Adornee = head
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.Parent = model

    local label = Instance.new("TextLabel")
    label.Name = "NameLabel"
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = color
    label.TextStrokeTransparency = 0
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextScaled = false
    label.TextWrapped = false
    label.ClipsDescendants = true
    label.TextTruncate = Enum.TextTruncate.None
    label.AutomaticSize = Enum.AutomaticSize.X
    label.TextXAlignment = Enum.TextXAlignment.Center
    label.TextYAlignment = Enum.TextYAlignment.Center
    label.TextSize = 10
    label.Font = Enum.Font.GothamBold
    label.Text = "Loading..."
    label.Parent = billboard
end

local function updateBillboardText(model)
    local billboard = model:FindFirstChild("ESP_NameBillboard")
    if not billboard then return end

    local label = billboard:FindFirstChild("NameLabel")
    if not label then return end

    local actorText = model:GetAttribute("ActorDisplayName") or "???"
    local skinText = model:GetAttribute("SkinNameDisplay")
    local username = model:GetAttribute("Username") or "Unknown"

    -- Use pre-tagged attribute
    if actorText == "Noli" and model:GetAttribute("IsFakeNoli") == true then
        actorText = actorText .. " (FAKE)"
    end

    local displayText = actorText
    if skinText and tostring(skinText) ~= "" then
        displayText = displayText .. " | " .. skinText
    end

    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local hp = math.floor(humanoid.Health)
        local maxhp = math.floor(humanoid.MaxHealth)
        displayText = string.format("%s (HP: %d/%d)", displayText, hp, maxhp)
    end

    label.Text = displayText
end

local noliByUsername = {}

local function clearFakeTags()
    for _, killer in ipairs(killersFolder:GetChildren()) do
        if killer:GetAttribute("ActorDisplayName") == "Noli" then
            killer:SetAttribute("IsFakeNoli", false)
        end
    end
end

local function scanNolis()
    noliByUsername = {}

    for _, killer in ipairs(killersFolder:GetChildren()) do
        if killer:GetAttribute("ActorDisplayName") == "Noli" then
            local username = killer:GetAttribute("Username")
            if username then
                if not noliByUsername[username] then
                    noliByUsername[username] = {}
                end
                table.insert(noliByUsername[username], killer)
            end
        end
    end

    for username, models in pairs(noliByUsername) do
        if #models > 1 then
            -- Noli đầu tiên là thật, những cái sau fake
            for i = 2, #models do
                models[i]:SetAttribute("IsFakeNoli", true)
            end
            models[1]:SetAttribute("IsFakeNoli", false)
        else
            -- Chỉ có 1 Noli thì không fake
            models[1]:SetAttribute("IsFakeNoli", false)
        end
    end
end

local function updateFakeNolis()
    clearFakeTags()
    scanNolis()
end

local function setupModel(model, isKiller)
    if not model:IsA("Model") or not model:FindFirstChildOfClass("Humanoid") then return end
    local color = isKiller and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(255, 255, 0)

    attachBillboard(model, color)
    updateBillboardText(model)

    if not model:FindFirstChild("ESP_Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Name = "ESP_Highlight"
        highlight.FillTransparency = 1
        highlight.OutlineTransparency = 0
        highlight.OutlineColor = color
        highlight.Adornee = model
        highlight.Parent = model
    end

    model:GetAttributeChangedSignal("ActorDisplayName"):Connect(function()
        updateBillboardText(model)
    end)
    model:GetAttributeChangedSignal("SkinNameDisplay"):Connect(function()
        updateBillboardText(model)
    end)

    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            updateBillboardText(model)
        end)
        humanoid:GetPropertyChangedSignal("MaxHealth"):Connect(function()
            updateBillboardText(model)
        end)
    end

    model.AncestryChanged:Connect(function(_, parent)
        if not parent then
            local bb = model:FindFirstChild("ESP_NameBillboard")
            if bb then bb:Destroy() end

            local hl = model:FindFirstChild("ESP_Highlight")
            if hl then hl:Destroy() end
        end
    end)
end

local function scanFolder(folder, isKiller)
    for _, model in ipairs(folder:GetChildren()) do
        setupModel(model, isKiller)
    end
end

task.spawn(function()
	while true do
		scanFolder(killersFolder, true)
		scanFolder(survivorsFolder, false)
		task.wait(5)
	end
end)

local function handleChildAdded(folder, isKiller)
    folder.ChildAdded:Connect(function(child)
        task.spawn(function()
            repeat task.wait() until child:IsDescendantOf(folder)
            local timeout = 3
            local timer = 0
            while (not child:FindFirstChild("Head") and not child:FindFirstChildWhichIsA("BasePart")) or not child:FindFirstChildOfClass("Humanoid") do
                task.wait(0.1)
                timer += 0.1
                if timer > timeout then return end
            end
            task.wait(0.2) -- để đảm bảo Attribute đã gán xong
            setupModel(child, isKiller)
        end)
    end)
end

handleChildAdded(killersFolder, true)
handleChildAdded(survivorsFolder, false)
updateFakeNolis()

-- Khi có Noli biến mất, quét lại
killersFolder.ChildRemoved:Connect(function(removed)
    if removed:GetAttribute("ActorDisplayName") == "Noli" then
        updateFakeNolis()
    end
end)

-- Khi có Noli mới thêm vào, quét lại sau 0.2s để attribute được cập nhật
killersFolder.ChildAdded:Connect(function(added)
    if added:GetAttribute("ActorDisplayName") == "Noli" then
        task.defer(function()
            task.wait(0.2)
            updateFakeNolis()
        end)
    end
end)

-- Rescan định kỳ tránh lỗi sai sót
task.spawn(function()
    while true do
        task.wait(10)
        updateFakeNolis()
    end
end)

RunService.RenderStepped:Connect(function()
	for _, folderData in pairs({
		{folder = killersFolder, toggle = killersESPToggle},
		{folder = survivorsFolder, toggle = survivorsESPToggle},
	}) do
		for _, model in ipairs(folderData.folder:GetChildren()) do
			local bb = model:FindFirstChild("ESP_NameBillboard")
			local hl = model:FindFirstChild("ESP_Highlight")

			if bb then bb.Enabled = folderData.toggle end
			if hl then hl.Enabled = folderData.toggle end

			if folderData.toggle and bb and bb.Adornee then
				local dist = (camera.CFrame.Position - bb.Adornee.Position).Magnitude
				local scale = math.clamp(1 / (dist / 20), 0.5, 2)

				local label = bb:FindFirstChild("NameLabel")
				if label then
					label.TextSize = math.clamp(10 * scale, 12, 20)
					bb.Size = UDim2.new(0, label.TextBounds.X + 20, 0, 50 * scale)
				end
			end
		end
	end
end)

-- ... (Các hàm và logic ESP Generator/Items) ...
local DEFAULT_SIZE = 5
local MIN_SIZE = 3
local MAX_SIZE = 15
local FAKE_DEFAULT_SIZE = 10
local FAKE_MIN_SIZE = 5
local FAKE_MAX_SIZE = 20
local trackedGenerators = {}
local partEspName = "NurbsPath"
local espTransparency = 0.5
local partEspTrigger = nil
local espConnection = nil
local generatorESPEnabled = false
local function getProgressPercent(value)
    if value == 0 then return "0%"
    elseif value == 26 then return "25%"
    elseif value == 52 then return "50%"
    elseif value == 78 then return "75%"
    elseif value == 100 then return "100%"
    else
    return ""
    end
end
local function calculateScale(pos, isFake)
    if not camera then return DEFAULT_SIZE end
    local distance = (camera.CFrame.Position - pos).Magnitude
    local defaultSize = isFake and FAKE_DEFAULT_SIZE or DEFAULT_SIZE
    local minSize = isFake and FAKE_MIN_SIZE or MIN_SIZE
    local maxSize = isFake and FAKE_MAX_SIZE or MAX_SIZE
    local scale = defaultSize * (20 / distance)
    return math.clamp(scale, minSize, maxSize)
end
local function createOrUpdateProgressESP(model, progressValue)
    if not model or not model:IsA("Model") then return end
    local adornee = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
    if not adornee then return end
    local billboard = model:FindFirstChild("Progress_ESP")
    if not billboard then
        billboard = Instance.new("BillboardGui")
        billboard.Name = "Progress_ESP"
        billboard.Adornee = adornee
        billboard.Size = UDim2.new(0, DEFAULT_SIZE*10, 0, DEFAULT_SIZE*3)
        billboard.StudsOffset = Vector3.new(0,3,0)
        billboard.AlwaysOnTop = true
        billboard.Parent = model
        local label = Instance.new("TextLabel")
        label.Name = "ProgressLabel"
        label.Size = UDim2.new(1,0,1,0)
        label.BackgroundTransparency = 1
        label.TextScaled = true
        label.Font = Enum.Font.GothamBold
        label.Parent = billboard
    end
    local label = billboard:FindFirstChild("ProgressLabel")
    if label then
        if model.Name == "FakeGenerator" then
            label.Text = "Fake Generator"
            label.TextColor3 = Color3.fromRGB(255,0,0)
        else
            label.Text = getProgressPercent(progressValue)
            label.TextColor3 = Color3.fromRGB(255,255,255)
        end
    end
    local isFake = model.Name == "FakeGenerator"
    task.spawn(function()
        while billboard.Parent do
            local scale = calculateScale(adornee.Position, isFake)
            billboard.Size = UDim2.new(0, scale*10, 0, scale*3)
            task.wait(0.1)
        end
    end)
end
local function attachESP(part)
    if not part or not part:IsA("BasePart") then return end
    if part:FindFirstChild("ESP_Fill") then return end
    local fill = Instance.new("BoxHandleAdornment")
    fill.Name = "ESP_Fill"
    fill.Adornee = part
    fill.AlwaysOnTop = true
    fill.ZIndex = 1
    fill.Size = part.Size
    fill.Transparency = espTransparency
    if part.Parent and part.Parent.Name == "FakeGenerator" then
        fill.Color3 = Color3.fromRGB(255,0,0)
    else
        fill.Color3 = Color3.fromRGB(220,150,255)
    end
    fill.Parent = part
end
local function attachESPForExistingParts()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and v.Name:lower() == partEspName:lower() then
            attachESP(v)
        end
    end
end
local function updateGenerators()
    local rootMap = workspace:FindFirstChild("Map")
    if not rootMap then return end
    local ingame = rootMap:FindFirstChild("Ingame")
    if not ingame then return end
    local gameMap = ingame:FindFirstChild("Map")
    if not gameMap then return end
    for _, obj in ipairs(gameMap:GetDescendants()) do
        if obj.Name == "Generator" or obj.Name == "FakeGenerator" then
            local progress = obj:FindFirstChild("Progress")
            local lastProgress = trackedGenerators[obj]
            if obj.Name == "Generator" and progress and progress:IsA("ValueBase") then
                if lastProgress ~= progress.Value then
                    createOrUpdateProgressESP(obj, progress.Value)
                    trackedGenerators[obj] = progress.Value
                end
            elseif obj.Name == "FakeGenerator" then
                createOrUpdateProgressESP(obj, 0)
                trackedGenerators[obj] = 0
            elseif lastProgress ~= nil then
                createOrUpdateProgressESP(obj, nil)
                trackedGenerators[obj] = nil
            end
        end
    end
end
local function updateAllESPSizes()
    for gen in pairs(trackedGenerators) do
        local billboard = gen:FindFirstChild("Progress_ESP")
        local adornee = gen.PrimaryPart or gen:FindFirstChildWhichIsA("BasePart")
        if billboard and adornee then
            local isFake = gen.Name == "FakeGenerator"
            local scale = calculateScale(adornee.Position, isFake)
            billboard.Size = UDim2.new(0, scale*10, 0, scale*3)
        end
    end
end
local updateThrottle = 0
local function startGeneratorESP()
    attachESPForExistingParts()
    if not partEspTrigger then
        partEspTrigger = workspace.DescendantAdded:Connect(function(v)
            if v:IsA("BasePart") and v.Name:lower() == partEspName:lower() then
                attachESP(v)
            end
        end)
    end
    if not espConnection then
        espConnection = RunService.RenderStepped:Connect(function(dt)
            if generatorESPEnabled then
                updateThrottle += dt
                if updateThrottle >= 0.5 then
                    updateGenerators()
                    updateAllESPSizes()
                    updateThrottle = 0
                end
            end
        end)
    end
end
local function stopGeneratorESP()
    if partEspTrigger then
        partEspTrigger:Disconnect()
        partEspTrigger = nil
    end
    if espConnection then
        espConnection:Disconnect()
        espConnection = nil
    end
    for gen in pairs(trackedGenerators) do
        createOrUpdateProgressESP(gen, nil)
    end
    trackedGenerators = {}
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and v.Name:lower() == partEspName:lower() then
            local adorn = v:FindFirstChild("ESP_Fill")
            if adorn then adorn:Destroy() end
        end
    end
end
local colorByName = {
	BloxyCola = Color3.fromRGB(255, 140, 0),
	Medkit = Color3.fromRGB(255, 100, 255),
}
local espParts = {}
local partEspTrigger = nil
local function FindInTable(tbl, value)
	for _, v in pairs(tbl) do
		if v == value then return true end
	end
	return false
end
local function createNameTag(part, tagName, color)
	if part:FindFirstChild("ESP_Billboard") then return end
	local billboard = Instance.new("BillboardGui")
	billboard.Name = "ESP_Billboard"
	billboard.Size = UDim2.new(0, 100, 0, 30)
	billboard.Adornee = part
	billboard.AlwaysOnTop = true
	billboard.StudsOffset = Vector3.new(0, 2.5, 0)
	billboard.Parent = part
	local textLabel = Instance.new("TextLabel")
	textLabel.Size = UDim2.new(1, 0, 1, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.TextColor3 = color
	textLabel.TextStrokeTransparency = 0
	textLabel.Text = tagName
	textLabel.Font = Enum.Font.SourceSansBold
	textLabel.TextScaled = false
	textLabel.TextSize = 10
	textLabel.Parent = billboard
end
local function createBoxESP(part)
	if not part or not part:IsA("BasePart") then return end
	if part.Name ~= "ItemRoot" or not part.Parent then return end
	local tagName = part.Parent.Name
	local color = colorByName[tagName] or Color3.fromRGB(255, 255, 255)
	if part:FindFirstChild(tagName.."_PESP") then return end
	local box = Instance.new("BoxHandleAdornment")
	box.Name = tagName.."_PESP"
	box.Adornee = part
	box.Size = part.Size
	box.Transparency = 0.5
	box.Color3 = color
	box.ZIndex = 0
	box.AlwaysOnTop = true
	box.Parent = part
	createNameTag(part, tagName, color)
	table.insert(espParts, tagName)
end
function enableItemESP()
	for _, v in pairs(workspace:GetDescendants()) do
		if v:IsA("BasePart") and v.Name == "ItemRoot" then
			createBoxESP(v)
		end
	end
	if not partEspTrigger then
		partEspTrigger = workspace.DescendantAdded:Connect(function(part)
			if part:IsA("BasePart") and part.Name == "ItemRoot" then
				createBoxESP(part)
			end
		end)
	end
end
function disableItemESP()
	for _, v in pairs(workspace:GetDescendants()) do
		if v:IsA("BasePart") and v.Name == "ItemRoot" then
			if v:FindFirstChild("ESP_Billboard") then
				v:FindFirstChild("ESP_Billboard"):Destroy()
			end
			local tagName = v.Parent and v.Parent.Name
			if tagName and v:FindFirstChild(tagName.."_PESP") then
				v:FindFirstChild(tagName.."_PESP"):Destroy()
			end
		end
	end
	espParts = {}
	if partEspTrigger then
		partEspTrigger:Disconnect()
		partEspTrigger = nil
	end
end

ESTab:AddToggle("ItemESP_Toggle", {
	Title = "Items ESP",
	Default = itemESPEnabled,
}):OnChange(function(Value)
	itemESPEnabled = Value
	if itemESPEnabled then
		enableItemESP()
	else
		disableItemESP()
	end
end)

ESTab:AddToggle("GeneratorsESP", {
   Title = "Generators ESP",
   Default = generatorESPEnabled,
}):OnChange(function(Value)
      generatorESPEnabled = Value
      if Value then
         startGeneratorESP()
      else
         stopGeneratorESP()
      end
   end,
)

local ingame = workspace:WaitForChild("Map"):WaitForChild("Ingame")

-- =============================================
-- == Builderman/Taph ESP Logic (Giữ nguyên) ==
-- =============================================
local dispenserPartNames = { "SprayCan", "UpperHolder", "Root" }
local dispenserESPColor = Color3.fromRGB(0, 162, 255)
local sentryESPColor = Color3.fromRGB(128, 128, 128)
local espTransparency = 0.5
local function isDispenser(model)
	return model:IsA("Model") and model.Name:lower():find("dispenser")
end
local function isSentry(model)
	return model:IsA("Model") and model.Name:lower():find("sentry")
end
local function createBillboardESP(part, labelText, color)
	if part:FindFirstChild("BillboardESP") then return end
	local billboard = Instance.new("BillboardGui")
	billboard.Name = "BillboardESP"
	billboard.Size = UDim2.new(0, 100, 0, 40)
	billboard.Adornee = part
	billboard.AlwaysOnTop = true
	billboard.StudsOffset = Vector3.new(0, part.Size.Y + 1, 0)
	billboard.Parent = part
	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = labelText
	label.TextColor3 = color
	label.Font = Enum.Font.GothamBold
	label.TextScaled = false
	label.TextSize = 13
	label.Parent = billboard
end
local function createDispenserESP(part)
	if not _G.DispenserESPEnabled then return end
	if not part:IsA("BasePart") then return end
	if not table.find(dispenserPartNames, part.Name) then return end
	if not part:FindFirstChild(part.Name.."_PESP") then
		local adorn = Instance.new("BoxHandleAdornment")
		adorn.Name = part.Name.."_PESP"
		adorn.Adornee = part
		adorn.AlwaysOnTop = true
		adorn.ZIndex = 0
		adorn.Size = part.Size
		adorn.Transparency = espTransparency
		adorn.Color3 = dispenserESPColor
		adorn.Parent = part
	end
	if part.Name == "SprayCan" and not part:FindFirstChild("BillboardESP") then
		createBillboardESP(part, "Dispenser", dispenserESPColor)
	end
end
local function createSentryESP(part)
	if not _G.SentryESPEnabled then return end
	if not part:IsA("BasePart") then return end
	if part.Name ~= "Root" then return end
	if not part:FindFirstChild("Root_PESP") then
		local adorn = Instance.new("BoxHandleAdornment")
		adorn.Name = "Root_PESP"
		adorn.Adornee = part
		adorn.AlwaysOnTop = true
		adorn.ZIndex = 0
		adorn.Size = part.Size
		adorn.Transparency = espTransparency
		adorn.Color3 = sentryESPColor
		adorn.Parent = part
	end
	if not part:FindFirstChild("BillboardESP") then
		createBillboardESP(part, "Sentry", sentryESPColor)
	end
end
local CustomESP_tripwarePartNames = { "Hook1", "Hook2", "Wire" }
local CustomESP_tripwareColor = Color3.fromRGB(255, 85, 0)
local CustomESP_subspaceColor = Color3.fromRGB(160, 32, 240)
local CustomESP_espTransparency = 0.5
local function CustomESP_isTripware(model)
	return model:IsA("Model") and model.Name:find("TaphTripwire") ~= nil
end
local function CustomESP_isSubspace(model)
	return model:IsA("Model") and model.Name == "SubspaceTripmine"
end
local function CustomESP_createBillboard(part, labelText, color)
	if part:FindFirstChild("CustomESP_BillboardESP") then return end
	local billboard = Instance.new("BillboardGui")
	billboard.Name = "CustomESP_BillboardESP"
	billboard.Size = UDim2.new(0, 100, 0, 40)
	billboard.Adornee = part
	billboard.AlwaysOnTop = true
	billboard.StudsOffset = Vector3.new(0, part.Size.Y + 1, 0)
	billboard.Parent = part
	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = labelText
	label.TextColor3 = color
	label.Font = Enum.Font.GothamBold
	label.TextScaled = false
	label.TextSize = 13
	label.Parent = billboard
end
local function CustomESP_createTripwareESP(part)
	if not _G.CustomESP_TripwareEnabled then return end
	if not part:IsA("BasePart") then return end
	if not table.find(CustomESP_tripwarePartNames, part.Name) then return end
	if not part:FindFirstChild(part.Name.."_CustomESP_PESP") then
		local adorn = Instance.new("BoxHandleAdornment")
		adorn.Name = part.Name.."_CustomESP_PESP"
		adorn.Adornee = part
		adorn.AlwaysOnTop = true
		adorn.ZIndex = 0
		adorn.Size = part.Size
		adorn.Transparency = CustomESP_espTransparency
		adorn.Color3 = CustomESP_tripwareColor
		adorn.Parent = part
	end
	if part.Name == "Wire" and not part:FindFirstChild("CustomESP_BillboardESP") then
		CustomESP_createBillboard(part, "Tripwire", CustomESP_tripwareColor)
	end
end
local function CustomESP_createSubspaceESP(part)
	if not _G.CustomESP_SubspaceEnabled then return end
	if not part:IsA("BasePart") then return end
	if part.Name ~= "SubspaceBox" then return end
	if not part:FindFirstChild("SubspaceBox_CustomESP_PESP") then
		local adorn = Instance.new("BoxHandleAdornment")
		adorn.Name = "SubspaceBox_CustomESP_PESP"
		adorn.Adornee = part
		adorn.AlwaysOnTop = true
		adorn.ZIndex = 0
		adorn.Size = part.Size
		adorn.Transparency = CustomESP_espTransparency
		adorn.Color3 = CustomESP_subspaceColor
		adorn.Parent = part
	end
	if not part:FindFirstChild("CustomESP_BillboardESP") then
		CustomESP_createBillboard(part, "Subspace Tripmine", CustomESP_subspaceColor)
	end
end
local function removeESPByNamePattern(parent, pattern)
	for _, child in ipairs(parent:GetChildren()) do
		if child.Name:find(pattern) then
			child:Destroy()
		end
	end
end
function EnableDispenserESP() _G.DispenserESPEnabled = true end
function DisableDispenserESP()
	_G.DispenserESPEnabled = false
	for _, part in ipairs(ingame:GetDescendants()) do
		if part.Parent and isDispenser(part.Parent) then
			removeESPByNamePattern(part, "_PESP")
			removeESPByNamePattern(part, "BillboardESP")
		end
	end
end
function EnableSentryESP() _G.SentryESPEnabled = true end
function DisableSentryESP()
	_G.SentryESPEnabled = false
	for _, part in ipairs(ingame:GetDescendants()) do
		if part.Parent and isSentry(part.Parent) then
			removeESPByNamePattern(part, "_PESP")
			removeESPByNamePattern(part, "BillboardESP")
		end
	end
end
function EnableTripwareESP() _G.CustomESP_TripwareEnabled = true end
function DisableTripwareESP()
	_G.CustomESP_TripwareEnabled = false
	for _, part in ipairs(ingame:GetDescendants()) do
		if part.Parent and CustomESP_isTripware(part.Parent) then
			removeESPByNamePattern(part, "_CustomESP_PESP")
			removeESPByNamePattern(part, "CustomESP_BillboardESP")
		end
	end
end
function EnableSubspaceESP() _G.CustomESP_SubspaceEnabled = true end
function DisableSubspaceESP()
	_G.CustomESP_SubspaceEnabled = false
	for _, part in ipairs(ingame:GetDescendants()) do
		if part.Parent and CustomESP_isSubspace(part.Parent) then
			removeESPByNamePattern(part, "_CustomESP_PESP")
			removeESPByNamePattern(part, "CustomESP_BillboardESP")
		end
	end
end

-- Event lắng nghe object spawn (Giữ nguyên)
ingame.DescendantAdded:Connect(function(part)
	local parent = part.Parent
	if parent then
		if isDispenser(parent) then createDispenserESP(part) end
		if isSentry(parent) then createSentryESP(part) end
		if CustomESP_isTripware(parent) then CustomESP_createTripwareESP(part) end
		if CustomESP_isSubspace(parent) then CustomESP_createSubspaceESP(part) end
	end
end)

-- Vòng lặp chính update ESP (ĐÃ SỬA LỖI LAG)
task.spawn(function()
	while true do
		local parts = ingame:GetDescendants()
		for _, part in ipairs(parts) do
			local parent = part.Parent
			if not parent then continue end
			
			if _G.DispenserESPEnabled and isDispenser(parent) then createDispenserESP(part) end
			
			if _G.SentryESPEnabled and isSentry(parent) then createSentryESP(part) end
			
			if _G.CustomESP_TripwareEnabled and CustomESP_isTripware(parent) then CustomESP_createTripwareESP(part) end
			
			if _G.CustomESP_SubspaceEnabled and CustomESP_isSubspace(parent) then CustomESP_createSubspaceESP(part) end
		end
		-- Chỉ chờ một lần duy nhất sau khi quét xong TẤT CẢ Parts
		task.wait(0.5) 
	end
end)

-- ... (Các Toggle/Slider của Aimbot đã chuyển Fluent, giữ nguyên) ...
ESTab:AddSection("Builderman ESP")
ESTab:AddToggle("ToggleBuilderDispenserESP", {
	Title = "Dispenser ESP",
	Default = false,
}):OnChange(function(v) if v then EnableDispenserESP() else DisableDispenserESP() end end)
ESTab:AddToggle("ToggleBuilderSentryESP", {
	Title = "Sentry ESP",
	Default = false,
}):OnChange(function(v) if v then EnableSentryESP() else DisableSentryESP() end end)
ESTab:AddSection("Taph ESP")
ESTab:AddToggle("ToggleBuilderTripwareESP", {
	Title = "Tripwire ESP",
	Default = false,
}):OnChange(function(v) if v then EnableTripwareESP() else DisableTripwareESP() end end)
ESTab:AddToggle("ToggleBuilderSubspaceESP", {
	Title = "Subspace Tripmine ESP",
	Default = false,
}):OnChange(function(v) if v then EnableSubspaceESP() else DisableSubspaceESP() end end)

-- Config global (Giữ nguyên)
getgenv().AimbotConfig = getgenv().AimbotConfig or {}
getgenv().AimbotConfig.Slash = getgenv().AimbotConfig.Slash or { Enabled = false, Smoothness = 1, Prediction = 0.25, Duration = 2 }
getgenv().AimbotConfig.Shoot = getgenv().AimbotConfig.Shoot or { Enabled = false, Smoothness = 1, Prediction = 0.25, Duration = 1.5 }
getgenv().AimbotConfig.Punch = getgenv().AimbotConfig.Punch or { Enabled = false, Smoothness = 1, Prediction = 0.25, Duration = 1.5 }
getgenv().AimbotConfig.TrueShoot = getgenv().AimbotConfig.TrueShoot or { Enabled = false, Smoothness = 1, Prediction = 0.6, Duration = 1.5 }
getgenv().AimbotConfig.ThrowPizza = getgenv().AimbotConfig.ThrowPizza or { Enabled = false, Smoothness = 1, Prediction = 0.25, Duration = 1.5 }
getgenv().AimbotConfig.Killers = getgenv().AimbotConfig.Killers or { Enabled = false, Duration = 3 }
getgenv().AimbotConfig.SelectedSkills = getgenv().AimbotConfig.SelectedSkills or { "Slash", "Punch", "Stab", "Nova", "VoidRush", "WalkspeedOverride", "Behead", "GashingWound", "CorruptNature", "CorruptEnergy", "MassInfection", "Entanglement" }
getgenv().AimbotConfig.Mode = getgenv().AimbotConfig.Mode or "Aimlock" 

AimbotTab:AddSection("Shedletsky (Slash)")
AimbotTab:AddToggle("AutoAimSlash", {
	Title = "Aimbot Slash",
	Default = getgenv().AimbotConfig.Slash.Enabled,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Slash.Enabled = Value
end)
AimbotTab:AddSlider("SmoothnessSlash", {
	Title = "Smoothness Slash",
	Range = {0, 101},
	Increment = 1,
	Suffix = "ms",
	Default = getgenv().AimbotConfig.Slash.Smoothness * 100,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Slash.Smoothness = Value / 100
end)
AimbotTab:AddSlider("PredictionSlash", {
	Title = "Prediction Slash",
	Range = {0, 2},
	Increment = 0.05,
	Suffix = "s",
	Default = getgenv().AimbotConfig.Slash.Prediction,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Slash.Prediction = Value
end)

AimbotTab:AddSection("Chance (One Shot)")
AimbotTab:AddToggle("AutoAimShoot", {
	Title = "Aimbot One Shot",
	Default = getgenv().AimbotConfig.Shoot.Enabled,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Shoot.Enabled = Value
end)
AimbotTab:AddSlider("SmoothnessShoot", {
	Title = "Smoothness One Shot",
	Range = {0, 101},
	Increment = 1,
	Suffix = "ms",
	Default = getgenv().AimbotConfig.Shoot.Smoothness * 100,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Shoot.Smoothness = Value / 100
end)
AimbotTab:AddSlider("PredictionShoot", {
	Title = "Prediction One Shot",
	Range = {0, 2},
	Increment = 0.05,
	Suffix = "s",
	Default = getgenv().AimbotConfig.Shoot.Prediction,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Shoot.Prediction = Value
end)

AimbotTab:AddSection("Chance (True One Shot)")
AimbotTab:AddParagraph("True One Shot Aimbot", "For Chance True One Shot Only")
AimbotTab:AddToggle("AutoAimTrueShoot", {
	Title = "Aimbot True One Shot",
	Default = getgenv().AimbotConfig.TrueShoot.Enabled,
}):OnChange(function(Value)
	getgenv().AimbotConfig.TrueShoot.Enabled = Value
end)
AimbotTab:AddSlider("SmoothnessTrueShoot", {
	Title = "Smoothness True One Shot",
	Range = {0, 101},
	Increment = 1,
	Suffix = "ms",
	Default = getgenv().AimbotConfig.TrueShoot.Smoothness * 100,
}):OnChange(function(Value)
	getgenv().AimbotConfig.TrueShoot.Smoothness = Value / 100
end)
AimbotTab:AddSlider("PredictionTrueShoot", {
	Title = "Prediction True One Shot",
	Range = {0, 2},
	Increment = 0.05,
	Suffix = "s",
	Default = getgenv().AimbotConfig.TrueShoot.Prediction,
}):OnChange(function(Value)
	getgenv().AimbotConfig.TrueShoot.Prediction = Value
end)

AimbotTab:AddSection("Guest 1337 (Punch)")
AimbotTab:AddToggle("AutoAimPunch", {
	Title = "Aimbot Punch",
	Default = getgenv().AimbotConfig.Punch.Enabled,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Punch.Enabled = Value
end)
AimbotTab:AddSlider("SmoothnessPunch", {
	Title = "Smoothness Punch",
	Range = {0, 101},
	Increment = 1,
	Suffix = "ms",
	Default = getgenv().AimbotConfig.Punch.Smoothness * 100,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Punch.Smoothness = Value / 100
end)
AimbotTab:AddSlider("PredictionPunch", {
	Title = "Prediction Punch",
	Range = {0, 2},
	Increment = 0.05,
	Suffix = "s",
	Default = getgenv().AimbotConfig.Punch.Prediction,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Punch.Prediction = Value
end)

AimbotTab:AddSection("Elliot (Throw Pizza)")
AimbotTab:AddToggle("AutoAimThrowPizza", {
	Title = "Aimbot Throw Pizza",
	Default = getgenv().AimbotConfig.ThrowPizza.Enabled,
}):OnChange(function(Value)
	getgenv().AimbotConfig.ThrowPizza.Enabled = Value
end)
AimbotTab:AddSlider("SmoothnessThrowPizza", {
	Title = "Smoothness Throw Pizza",
	Range = {0, 101},
	Increment = 1,
	Suffix = "ms",
	Default = getgenv().AimbotConfig.ThrowPizza.Smoothness * 100,
}):OnChange(function(Value)
	getgenv().AimbotConfig.ThrowPizza.Smoothness = Value / 100
end)
AimbotTab:AddSlider("PredictionThrowPizza", {
	Title = "Prediction Throw Pizza",
	Range = {0, 2},
	Increment = 0.2,
	Suffix = "s",
	Default = getgenv().AimbotConfig.ThrowPizza.Prediction,
}):OnChange(function(Value)
	getgenv().AimbotConfig.ThrowPizza.Prediction = Value
end)

AimbotTab:AddSection("Killers")
AimbotTab:AddToggle("EnableAimbotAll", {
	Title = "Killers's Aimbot",
	Default = getgenv().AimbotConfig.Killers.Enabled,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Killers.Enabled = Value
end)

AimbotTab:AddSection("AimMode")
AimbotTab:AddDropdown("AimModeSelect", {
	Title = "Aim Mode",
	Options = {"Aimbot", "RootPart"},
	Default = getgenv().AimbotConfig.Mode,
}):OnChange(function(Value)
	getgenv().AimbotConfig.Mode = Value[1] 
end)

local function isKillerSkill(skillName) 
    for _, v in ipairs(getgenv().AimbotConfig.SelectedSkills) do 
        if v == skillName then return true end 
    end 
    return false 
end
